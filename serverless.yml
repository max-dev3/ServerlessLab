service: serverless-lab
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  environment:
    IS_OFFLINE: true
    ORGANIZATIONS_TABLE: Organizations
    USERS_TABLE: Users

    CREATE_ORGANIZATION_QUEUE_URL: http://localhost:9324/000000000000/createOrganizationQueue-dev
    UPDATE_ORGANIZATION_QUEUE_URL: http://localhost:9324/000000000000/updateOrganizationQueue-dev
    CREATE_USER_QUEUE_URL:        http://localhost:9324/000000000000/createUserQueue-dev
    UPDATE_USER_QUEUE_URL:        http://localhost:9324/000000000000/updateUserQueue-dev

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-offline-sqs

custom:
  dynamodb:
    stages: [dev]
    start:
      port: 8000
      inMemory: true
      migrate: true
      sharedDb: true
      convertEmptyValues: true

  serverless-offline-sqs:
    autoCreate: true
    endpoint: http://localhost:9324
    region: us-east-1
    apiVersion: '2012-11-05'

functions:
  createOrganization:
    handler: handler.createOrganization
    events:
      - http:
          path: organizations
          method: post
          cors: true

  updateOrganization:
    handler: handler.updateOrganization
    events:
      - http:
          path: organizations/{orgId}
          method: put
          cors: true

  createUser:
    handler: handler.createUser
    events:
      - http:
          path: organizations/{orgId}/users
          method: post
          cors: true

  updateUser:
    handler: handler.updateUser
    events:
      - http:
          path: organizations/{orgId}/users/{userId}
          method: put
          cors: true

  processCreateOrganization:
    handler: handler.processCreateOrganization
    events:
      - sqs:
          arn:
            Fn::GetAtt: [CreateOrganizationQueue, Arn]
          batchSize: 1

  processUpdateOrganization:
    handler: handler.processUpdateOrganization
    events:
      - sqs:
          arn:
            Fn::GetAtt: [UpdateOrganizationQueue, Arn]
          batchSize: 1

  processCreateUser:
    handler: handler.processCreateUser
    events:
      - sqs:
          arn:
            Fn::GetAtt: [CreateUserQueue, Arn]
          batchSize: 1

  processUpdateUser:
    handler: handler.processUpdateUser
    events:
      - sqs:
          arn:
            Fn::GetAtt: [UpdateUserQueue, Arn]
          batchSize: 1

  getOrganizations:
    handler: handler.getOrganizations
    events:
      - http:
          path: organizations
          method: get
          cors: true

  getUsers:
    handler: handler.getUsers
    events:
      - http:
          path: users
          method: get
          cors: true

  getUsersByOrganization:
    handler: handler.getUsersByOrganization
    events:
      - http:
          path: organizations/{orgId}/users
          method: get
          cors: true

resources:
  Resources:
    # --- SQS ---
    CreateOrganizationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: createOrganizationQueue-dev
    UpdateOrganizationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: updateOrganizationQueue-dev
    CreateUserQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: createUserQueue-dev
    UpdateUserQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: updateUserQueue-dev

    # -- DynamoDB ---
    OrganizationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Organizations
        AttributeDefinitions:
          - AttributeName: orgId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: orgId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NameIndex
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection: { ProjectionType: ALL }
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: orgId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection: { ProjectionType: ALL }
          - IndexName: OrgIdIndex
            KeySchema:
              - AttributeName: orgId
                KeyType: HASH
            Projection: { ProjectionType: ALL }
        BillingMode: PAY_PER_REQUEST
